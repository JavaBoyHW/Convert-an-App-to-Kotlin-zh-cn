1
00:00:00,000 --> 00:00:03,120
 在这个课程，你将学到Kotlin
2
00:00:03,120 --> 00:00:06,120
 给Android开发带来的所有特性.


3
00:00:06,120 --> 00:00:07,470
 Kotlin的一些特性,


4
00:00:07,470 --> 00:00:09,510
 就像先进的烹调设备,


5
00:00:09,510 --> 00:00:12,976
 是现代工程学的重要成果.


6
00:00:12,976 --> 00:00:14,670
 一些人谦虚的,


7
00:00:14,670 --> 00:00:18,545
 幕后工作才让你的生活更美好.


8
00:00:18,545 --> 00:00:23,205
 在这个课程, 我们将使用Kotlin 去构建一个功能齐全的笔记型应用程序,


9
00:00:23,205 --> 00:00:25,425
 包括创建、编写,


10
00:00:25,425 --> 00:00:28,935
 和删除, 一切都基于SQLite.


11
00:00:28,935 --> 00:00:30,735
 在我们开始前,


12
00:00:30,735 --> 00:00:35,005
 让我们浏览一下你在Kotlin可能会遇到的一些重大差异.


13
00:00:35,005 --> 00:00:38,175
 别担心，他尽可能的像java那样,


14
00:00:38,175 --> 00:00:40,240
 所以你不应该有太多担心.


15
00:00:40,240 --> 00:00:44,100
 让我们来看一个标准的Kotlin方法特征.


16
00:00:44,100 --> 00:00:47,125
 这是在MainActivity的onCreate方法.


17
00:00:47,125 --> 00:00:49,800 首先, 你会注意到fun 关键字,


18
00:00:49,800 --> 00:00:52,200
 有些搞笑的？符号,


19
00:00:52,200 --> 00:00:58,495
 参数和返回类型声明由后缀取代了前缀.


20
00:00:58,495 --> 00:01:02,775
 现在，作为类型声明的后缀策略的一部分,


21
00:01:02,775 --> 00:01:08,600 您已经注意到声明所有变量的关键字是val或var.


22
00:01:08,600 --> 00:01:12,464
 简单来说, 一个val声明一个常量,


23
00:01:12,464 --> 00:01:14,475
 它不能被再修改.


24
00:01:14,475 --> 00:01:16,890
 然而, var更像


25
00:01:16,890 --> 00:01:19,950
 Java的标准声明他是可以再次赋值的,


26
00:01:19,950 --> 00:01:22,890 
所以你可以按你预想的对他多次赋值.


27
00:01:22,890 --> 00:01:25,890
 这些微小的val和var关键字,


28
00:01:25,890 --> 00:01:29,175
 结合Kotlin的类型推断系统,


29
00:01:29,175 --> 00:01:32,545 这意味着你将能够创建一些令人不可思议的简洁代码.


30
00:01:32,545 --> 00:01:37,700
 你看, 如果Kotlin能推算出你自己想要的类型,


31
00:01:37,700 --> 00:01:41,215 
然后你可以从类型声明中解放自己.


32
00:01:41,215 --> 00:01:43,145
 那么这些"?"符号呢？


33
00:01:43,145 --> 00:01:46,880
 嗯, 它们实际上是Kotlin最有用的特征的一部分.


34
00:01:46,880 --> 00:01:51,135 你看，默认情况下，Kotlin中的所有声明都被认为是非空的,


35
00:01:51,135 --> 00:01:52,590 
这意味着


36
00:01:52,590 --> 00:01:56,355 当你尝试将他们设为空值时，你讲得到一个编译时错误.

 
37
00:01:56,355 --> 00:02:00,910
 如果你想有一个标准的java风格的空值参数,


38
00:02:00,910 --> 00:02:03,255
 你可以给它一个"？"去修饰.


39
00:02:03,255 --> 00:02:06,135
 同样的, 如果您试图对一个空值执行不安全的操作

40
00:02:06,135 --> 00:02:10,000
 编译器仍会报错.
