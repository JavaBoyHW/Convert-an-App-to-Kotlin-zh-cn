1
00:00:00,000 --> 00:00:02,505
我打算告诉你一个秘密.

2
00:00:02,505 --> 00:00:06,710将您的代码库转换为Kotlin实际上是非常容易的.


3
00:00:06,710 --> 00:00:08,060
 事实上，它是如此简单,


4
00:00:08,060 --> 00:00:10,800
 有一个快捷键能自动完成.


5
00:00:10,800 --> 00:00:13,980
 你可以通过如下两种方式任何一种,点击Command-Shift 和 K

6
00:00:13,980 --> 00:00:17,460
 在你的Mac电脑上或者你可以在菜单栏中选择Code,


7
00:00:17,460 --> 00:00:21,380
 点击Convert Java file to Kotlin file.


8
00:00:21,380 --> 00:00:24,070 让我们从Note.java开始.


9
00:00:24,070 --> 00:00:26,420
 这只是一个简单的数据库访问类,


10
00:00:26,420 --> 00:00:28,235 
好像也没其他功能了,


11
00:00:28,235 --> 00:00:30,535
 但它看上去有很多话想说（它看上去太啰嗦）.


12
00:00:30,535 --> 00:00:34,730
 让我们看看自动转换后会是什么样子.


13
00:00:34,730 --> 00:00:40,275
 喔! 我们把这个文件从55行减到12行.


14
00:00:40,275 --> 00:00:42,170
 注意，它甚至从我们的空注解中
15
00:00:42,170 --> 00:00:46,910
 拿到提示并使用"？"去修饰我们的text变量.


16
00:00:46,910 --> 00:00:48,755
 现在这个过程并不完美,


17
00:00:48,755 --> 00:00:52,980
 通常你会遇到一些需要手工修复的错误.


18
00:00:52,980 --> 00:00:54,275
 我们这次只是比较幸运,


19
00:00:54,275 --> 00:00:57,660
 通常转化器会出错因为，空检查,


20
00:00:57,660 --> 00:01:01,980
 Lambda 表达式和其他非标准Java特性.


21
00:01:01,980 --> 00:01:04,250
 您还将注意到，所有的getter和setter都消失了,

22
00:01:04,250 --> 00:01:08,115
 它们已被正常变量声明所取代.


23
00:01:08,115 --> 00:01:12,285
 现在你可能会问，这不打破了java的基本规则吗?


24
00:01:12,285 --> 00:01:14,105
 简单来说是这样的.


25
00:01:14,105 --> 00:01:17,375
 你可以看到，从技术上来说getter和setter扔是在这的,


26
00:01:17,375 --> 00:01:21,523
 并且如果你想的话，你可以使用自定义的getter和setter来替换默认的.


27
00:01:21,523 --> 00:01:23,600
 但是Kotlin编译器实际上是隐藏它们，

28
00:01:23,600 --> 00:01:25,720
 并在hood下生成它们,


29
00:01:25,720 --> 00:01:28,315
 所以你不必键入这么多的模板代码.


30
00:01:28,315 --> 00:01:32,360
 接下来, 让我们转换我们的MainActivity文件.


31
00:01:32,360 --> 00:01:34,361
 这里有很多事情要做,


32
00:01:34,361 --> 00:01:37,895
 所以我想我们会看到一些有趣的事情发生.


33
00:01:37,895 --> 00:01:42,020
 你是否注意到在你的OnClickListener这里发生了什么?


34
00:01:42,020 --> 00:01:45,570
 这是由于一个Kotlin中称为Sum Conversion(复合转换)的特性.


35
00:01:45,570 --> 00:01:50,360
 但是你需要知道的是任何像Runnable或OnClickListener
36
00:01:50,360 --> 00:01:55,769 
这样的只有一个方法的简单接口可以用简单的Lambda表达式表示在Kotlin中,


37
00:01:55,769 --> 00:01:59,090
 编译器将处理必要的转换.


38
00:01:59,090 --> 00:02:04,425
Switter语句实际上已经被When表达式替换了。


39
00:02:04,425 --> 00:02:07,295
现在它不仅有一个稍微简洁的语法,


40
00:02:07,295 --> 00:02:10,570
 而且单词表达式在这里非常重要.


41
00:02:10,570 --> 00:02:15,635
 这意味着您的表达式实际上可以返回一个值.


42
00:02:15,635 --> 00:02:17,885
在Kotlin中你将会看到很多这样的模式,

43
00:02:17,885 --> 00:02:20,660
很多Java里面没有返回值得声明

44
00:02:20,660 --> 00:02:24,555
变成有返回值的。

45
00:02:24,555 --> 00:02:27,680
所以，你的if，while和

46
00:02:27,680 --> 00:02:32,555
 try-catche都升级为可以返回参数的表达式,

47
00:02:32,555 --> 00:02:34,730
达到更简洁的代码.

48
00:02:34,730 --> 00:02:41,100
现在，我们将获益于当选中选择的条目时，让我们继续下节课.