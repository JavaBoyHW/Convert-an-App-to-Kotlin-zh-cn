1
00:00:00,000 --> 00:00:02,115
让我们回到代码，

2
00:00:02,115 --> 00:00:07,170
我们将从自动转化NotesContract.java开始.

3
00:00:07,170 --> 00:00:09,930
哦，这有些错误。

4
00:00:09,930 --> 00:00:15,725
如你看到的，Kotlin转化器在处理较复杂的代码时会导致简单错误.

5
00:00:15,725 --> 00:00:18,920
让我们清理这些错误并继续。

6
00:00:18,920 --> 00:00:22,650
首先，我们看到Kotlin不希望引导你用

7
00:00:22,650 --> 00:00:27,124
下划线ID命名从基础列接口，

8
00:00:27,124 --> 00:00:29,955
这是Java存在的古怪特性。

9
00:00:29,955 --> 00:00:33,355
所以，让我们继续，我们将马上实现它

10
00:00:33,355 --> 00:00:37,575
我们还将向我们的代码中添加等效的静态导入,

11
00:00:37,575 --> 00:00:42,650
这样我们就不必在这个地方看到这个可标记的前缀.

12
00:00:42,650 --> 00:00:46,205
完美，现在再次编译我们的代码，

13
00:00:46,205 --> 00:00:48,545
让我们进一步改进它.  

14
00:00:48,545 --> 00:00:52,515
如果你使用过类似Groovy或Swift的语言，

15
00:00:52,515 --> 00:00:57,835
你也许遇到过一些叫做字符串插值或字符串模板。

16
00:00:57,835 --> 00:01:03,030
这里您可以直接在字符串中嵌入变量和表达式.

17
00:01:03,030 --> 00:01:07,965
我们很高兴告诉你在Android开发中，Kotlin完全支持这个特性.

18
00:01:07,965 --> 00:01:11,445
所以我们最终可以摆脱所有这些加号.

19
00:01:11,445 --> 00:01:16,615
对于这种转换，我们可以让IDE代替我们的繁琐工作。

20
00:01:16,615 --> 00:01:20,595
在Mac中敲击Enter或Alt Enter在Windows

21
00:01:20,595 --> 00:01:23,945
并且选择Convert String to Template

22
00:01:23,945 --> 00:01:28,508
喔。它可能已经合并到了一行,

23
00:01:28,508 --> 00:01:30,545
但是它依据令人激动。

24
00:01:30,545 --> 00:01:35,165
让我们先把它分解成多行以提高可读性.

25
00:01:35,165 --> 00:01:38,777
现在，转化我们其他的文件，

26
00:01:38,777 --> 00:01:42,075
我们注意到一些有趣的事情关于SQL查询.


27
00:01:42,075 --> 00:01:44,760
我么实际上搞错了，我们得到了一个错误的表名，

28
00:01:44,760 --> 00:01:46,545
但是我们忘记了去使用变量。

29
00:01:46,545 --> 00:01:49,210
这将是一个相当大的bug。

30
00:01:49,210 --> 00:01:53,410
让我们继续，并且切换到字符串模板.
